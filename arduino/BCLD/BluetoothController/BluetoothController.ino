#include <SPI.h>
#include <SD.h>

#include "BT_Constants.h"
#include "SD_Card.h"
#include "PB_Master.h"

PB_Master pb_master = PB_Master();
SD_Card sd_card = SD_Card();

//static const byte MINION_DATA[256*3] = {0,0,0,0,0,0,0,0,0,90,90,90,77,77,77,0,0,0,96,96,96,90,90,90,90,90,90,0,0,0,77,77,77,77,77,77,96,96,96,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,77,77,77,0,0,0,90,90,90,252,223,0,252,224,0,252,224,0,252,224,0,252,223,0,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,96,96,96,252,220,0,252,221,0,252,222,0,252,223,0,252,223,0,252,224,0,252,224,0,90,90,90,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,217,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,252,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,111,96,164,164,164,95,39,39,255,237,237,164,164,164,95,39,39,255,237,237,164,164,164,87,99,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,99,86,164,164,164,255,237,237,255,237,237,164,164,164,255,237,237,255,237,237,164,164,164,97,111,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,210,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,252,217,0,0,0,0,87,66,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,208,0,252,209,0,252,210,0,252,211,0,252,211,0,252,212,0,252,213,0,252,213,0,252,214,0,87,66,33,87,66,33,87,66,33,0,0,0,0,0,0,0,0,0,0,0,0,252,206,0,255,255,255,255,255,255,255,255,255,238,238,238,255,255,255,238,238,238,255,255,255,252,212,0,0,0,0,252,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,203,0,252,204,0,238,238,238,255,240,240,238,224,224,255,240,240,238,238,238,252,209,0,252,209,0,0,0,0,252,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,128,161,33,62,87,252,202,0,252,204,0,252,204,0,252,205,0,252,206,0,33,62,87,88,128,161,0,0,0,252,208,0,0,0,0,0,0,0,0,0,0,252,201,0,252,201,0,252,201,0,88,128,161,88,128,161,55,113,161,46,95,136,55,113,161,88,128,161,88,128,161,252,204,0,252,206,0,252,206,0,0,0,0,0,0,0,0,0,0,252,201,0,0,0,0,88,128,161,88,128,161,88,128,161,55,113,161,46,95,136,55,113,161,88,128,161,88,128,161,88,128,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,66,33,87,66,33,0,0,0,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,66,33,0,0,0,0,0,0,0,0,0,33,41,51,33,41,51,0,0,0,33,41,51,33,41,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,41,51,33,41,51,33,41,51,0,0,0,33,41,51,33,41,51,33,41,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//static const byte MINION2_DATA[256*3] = {0,0,0,0,0,0,0,0,0,90,90,90,77,77,77,0,0,0,96,96,96,0,0,0,90,90,90,0,0,0,77,77,77,77,77,77,96,96,96,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,77,77,77,0,0,0,90,90,90,252,223,0,252,224,0,252,224,0,252,224,0,252,223,0,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,96,96,96,252,220,0,252,221,0,252,222,0,252,223,0,252,223,0,252,224,0,252,224,0,90,90,90,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,217,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,252,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,111,96,164,164,164,255,237,237,255,237,237,164,164,164,255,237,237,255,237,237,164,164,164,87,99,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,99,86,164,164,164,95,39,39,255,237,237,164,164,164,95,39,39,255,237,237,164,164,164,97,111,96,0,0,0,0,0,0,0,0,0,0,0,0,87,66,33,0,0,0,0,0,0,252,210,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,252,217,0,0,0,0,0,0,0,0,0,0,0,0,0,87,66,33,87,66,33,0,0,0,252,208,0,252,209,0,252,210,0,252,211,0,252,211,0,252,212,0,252,213,0,252,213,0,252,214,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,0,0,0,0,0,0,252,206,0,255,255,255,238,238,238,255,255,255,238,238,238,255,255,255,238,238,238,255,255,255,252,212,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,0,0,0,0,0,0,252,203,0,252,204,0,238,238,238,255,240,240,238,224,224,255,240,240,238,238,238,252,209,0,252,209,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,252,201,0,0,0,0,88,128,161,33,62,87,252,202,0,252,204,0,252,204,0,252,205,0,252,206,0,33,62,87,88,128,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,252,201,0,252,201,0,88,128,161,88,128,161,55,113,161,46,95,136,55,113,161,88,128,161,88,128,161,252,204,0,252,206,0,252,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,128,161,88,128,161,88,128,161,55,113,161,46,95,136,55,113,161,88,128,161,88,128,161,88,128,161,0,0,0,252,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,0,0,0,87,66,33,87,66,33,87,66,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,41,51,33,41,51,0,0,0,33,41,51,33,41,51,0,0,0,0,0,0,0,0,0,87,66,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,41,51,33,41,51,33,41,51,0,0,0,33,41,51,33,41,51,33,41,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

void setup() {
  Serial.begin(9600);
}

void loop() {

  byte data[4];

  if (sd_card.readBytes(data, 4)) {
    switch(data[0]) {
      case 0: // ADD COLOR()
        pb_master.sendPixel(data[1], data[2], data[3]);
        break;

      case 1: // SHOW()
        pb_master.show();
        break;

      case 2: // FILL SCREEN()
        pb_master.fillScreen(data[1], data[2], data[3]);
        break;

      case 3: // DELAY()
        delay(data[1] * 10);
        break;

      case 255: // CLEAR()
        pb_master.clear();
        break;

      default:
        break;
    }
  } else {
    // end of file
    sd_card.seek(0); // go back to beginning;
    pb_master.clear();
  }
}


/*

  static int counter = 0;
  static unsigned long start = millis();
  static unsigned long end = start + 10000; // 10 sec later
  if (millis() > end) {
    Serial.print("Frames in last 10 sec: ");
    Serial.println(counter);
    counter = 0;

    start = millis();
    end = start + 10000;
  }


  pb_master.clear();
  for (int i = 0; i < 3*256; i += 3) {
    pb_master.sendPixel(MINION_DATA[i], MINION_DATA[i+1], MINION_DATA[i+2]);
  }
  pb_master.show();
  //counter++;


  delay(300);


  pb_master.clear();
  for (int i = 0; i < 3*256; i += 3) {
    pb_master.sendPixel(MINION2_DATA[i], MINION2_DATA[i+1], MINION2_DATA[i+2]);
  }
  pb_master.show();
  //counter++;
  


  delay(300);
}

*/