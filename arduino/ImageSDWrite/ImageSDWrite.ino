/*
  SD card read/write

 This example shows how to read and write data to and from an SD card file
 The circuit:
 * SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 10

 */

#include <SPI.h>
#include <SD.h>

void sd_show();
void sd_delay(byte amount);
void sd_clear();
void sd_writePacket(byte command, byte r, byte g, byte b);
void sd_fillScreen(byte r, byte g, byte b);

File myFile;

//static const byte MINION[256*3] = {0,0,0,0,0,0,0,0,0,90,90,90,77,77,77,0,0,0,96,96,96,0,0,0,90,90,90,0,0,0,77,77,77,77,77,77,96,96,96,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,77,77,77,0,0,0,90,90,90,252,223,0,252,224,0,252,224,0,252,224,0,252,223,0,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,96,96,96,252,220,0,252,221,0,252,222,0,252,223,0,252,223,0,252,224,0,252,224,0,90,90,90,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,217,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,252,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,111,96,164,164,164,255,237,237,255,237,237,164,164,164,255,237,237,255,237,237,164,164,164,87,99,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,99,86,164,164,164,95,39,39,255,237,237,164,164,164,95,39,39,255,237,237,164,164,164,97,111,96,0,0,0,0,0,0,0,0,0,0,0,0,87,66,33,0,0,0,0,0,0,252,210,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,252,217,0,0,0,0,0,0,0,0,0,0,0,0,0,87,66,33,87,66,33,0,0,0,252,208,0,252,209,0,252,210,0,252,211,0,252,211,0,252,212,0,252,213,0,252,213,0,252,214,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,0,0,0,0,0,0,252,206,0,255,255,255,238,238,238,255,255,255,238,238,238,255,255,255,238,238,238,255,255,255,252,212,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,0,0,0,0,0,0,252,203,0,252,204,0,238,238,238,255,240,240,238,224,224,255,240,240,238,238,238,252,209,0,252,209,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,252,201,0,0,0,0,88,128,161,33,62,87,252,202,0,252,204,0,252,204,0,252,205,0,252,206,0,33,62,87,88,128,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,201,0,252,201,0,252,201,0,88,128,161,88,128,161,55,113,161,46,95,136,55,113,161,88,128,161,88,128,161,252,204,0,252,206,0,252,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,128,161,88,128,161,88,128,161,55,113,161,46,95,136,55,113,161,88,128,161,88,128,161,88,128,161,0,0,0,252,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,88,128,161,0,0,0,87,66,33,87,66,33,87,66,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,41,51,33,41,51,0,0,0,33,41,51,33,41,51,0,0,0,0,0,0,0,0,0,87,66,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,41,51,33,41,51,33,41,51,0,0,0,33,41,51,33,41,51,33,41,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//static const byte SPONGEBOB[3*256] = {};
//static const byte SUNSET[3*256] = {255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,254,0,255,252,0,255,250,0,254,248,0,253,246,0,252,231,0,251,229,0,251,227,0,250,226,0,250,224,0,250,222,0,249,220,0,249,218,0,249,215,0,248,214,0,248,212,0,249,210,0,248,208,0,247,206,0,247,204,0,247,202,0,245,188,0,245,187,0,244,185,0,244,183,0,243,181,0,244,179,0,243,177,0,243,175,0,243,174,0,242,172,0,242,170,0,242,168,0,242,167,0,241,165,0,241,162,0,241,161,0,238,148,0,238,146,0,238,144,0,237,143,0,237,141,0,237,139,0,237,137,0,236,135,0,236,134,0,236,132,0,235,130,0,236,129,0,235,126,0,235,125,0,234,123,0,234,122,0,232,109,0,231,107,0,231,106,0,231,104,0,231,102,0,231,100,0,230,98,0,230,97,0,230,95,0,229,94,0,229,92,0,228,90,0,228,89,0,228,87,0,227,85,0,227,84,0,225,72,0,225,70,0,225,69,0,224,68,0,224,65,0,224,64,0,223,63,0,223,60,0,223,59,0,222,58,0,222,57,0,222,54,0,222,53,0,222,52,0,221,50,0,221,49,0,219,37,0,218,35,0,218,34,0,217,32,0,218,31,0,217,29,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,215,20,0,215,18,0,215,16,0,215,14,0,212,4,0,212,2,0,211,1,0,212,0,1,211,0,1,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,208,0,14,208,0,16,208,0,17,206,0,27,206,0,29,205,0,29,205,0,31,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,202,0,46,201,0,46,199,0,56,199,0,57,199,0,58,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,195,0,74,192,0,83,192,0,84,192,0,85,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,188,0,100,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,169,26,0,170,26,0,169,26,0,148,21,0,147,21,0,148,21,0,148,21,0,148,21,0,148,21,0,148,20,0,147,21,0,148,21,0,148,21,0,148,21,0,147,21,0,148,21,0,147,21,0,148,20,0,148,21,0,127,16,0,127,15,0,126,16,0,127,15,0,127,15,0,126,16,0,127,16,0,126,15,0,127,15,0,127,15,0,127,15,0,127,15,0,127,16,0,127,15,0,126,16,0,127,16,0,105,11,0,105,10,0,105,10,0,105,10,0,105,10,0,105,10,0,106,10,0,105,10,0,106,10,0,105,10,0,105,10,0,106,10,0,106,10,0,106,11,0,105,10,0,106,10,0,84,5,0,85,5,0,85,5,0,84,5,0,84,4,0,84,4,0,85,5,0,84,5,0,84,5,0,84,5,0,84,5,0,84,5,0,84,5,0,85,5,0,84,5,0,84,5};
static const byte COLORS[3*256] = {};

void setup() {
  Serial.begin(9600);
  pinMode(10, OUTPUT);
  SD.begin(10);

  //SD.remove("data.txt");

  myFile = SD.open("data.txt", FILE_WRITE);
  if (myFile) {
    /*
    sd_clear();
    for (int i = 0; i < 3*256; i += 3) sd_writePacket(0, MINION[i], MINION[i+1], MINION[i+2]);
    sd_show();
    
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    */

    /*
    sd_clear();
    for (int i = 0; i < 3*256; i += 3) sd_writePacket(0, SPONGEBOB[i], SPONGEBOB[i+1], SPONGEBOB[i+2]);
    sd_show();
    
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    */

    /*
    sd_clear();
    for (int i = 0; i < 3*256; i += 3) sd_writePacket(0, SUNSET[i], SUNSET[i+1], SUNSET[i+2]);
    sd_show();
    
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    */

    sd_clear();
    for (int i = 0; i < 3*256; i += 3) sd_writePacket(0, COLORS[i], COLORS[i+1], COLORS[i+2]);
    sd_show();
    
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);
    sd_delay(250);

/*
    sd_clear();
    sd_fillScreen(255, 255, 255);
    sd_show();

    sd_delay(255);
    sd_clear();
    sd_fillScreen(0, 255, 255);
    sd_show();

    sd_delay(255);
    sd_clear();
    sd_fillScreen(255, 0, 255);
    sd_show();

    sd_delay(255);
    sd_clear();
    sd_fillScreen(255, 255, 0);
    sd_show();
    */
    
    Serial.print("data.txt file size: ");
    Serial.print(myFile.size());
    Serial.println(" bytes");
    
    myFile.close();

    Serial.println("Success!");
  } else {
    Serial.println("Error opening SD card file.");
  }
}

void loop() {}



void sd_fillScreen(byte r, byte g, byte b) {
  sd_writePacket(2, r, g, b);
}

void sd_delay(byte amount) {
  sd_writePacket(3, amount, 0, 0);
}

void sd_show() {
  sd_writePacket(1, 0, 0, 0);
}

void sd_clear() {
  sd_writePacket(255, 0, 0, 0);
}

void sd_writePacket(byte command, byte r, byte g, byte b) {
  myFile.write(command); // command
  myFile.write(r); // red
  myFile.write(g); // green
  myFile.write(b); // blue
}
